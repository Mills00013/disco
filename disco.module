<?php

/**
 * @file
 *
 * Generate random colors for elements on a page
 *
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function disco_help($path, $arg) {
  // Switch based on where we're at in Drupal
  switch ($path) {
    case "admin/help#disco":
      // When we're in the admin menu, tell the user generically what this is
      return '<p>' . t("Generate randomly applied colors to most elements on a page.") . '</p>';
      break;
  }
}

/**
 * Function to generate a single byte for a HEX color code.
 */
function _disco_generate_color_byte() {
  //Generating a random hex byte from a decimal number
  return str_pad( dechex( mt_rand( 0, 255 ) ), 2, '0', STR_PAD_LEFT);
}

/**
 * Function to create a full color code (without the hash).
 */
function _disco_generate_color() {
  //Combining three of the random hex bytes into a single six digit color code
  return _disco_generate_color_byte() . _disco_generate_color_byte() . _disco_generate_color_byte();
}

/**
 * Function to generate a css shadow.
 */
function _disco_generate_shadow() {
  $shadow = '';
  $shadow_settings = variable_get('disco_shadow_settings');

  if ($shadow_settings['randepth'] === 'randepth') {
    // Maxxing users out at 30 px so that the page isn't saturated by shadows
    $shadow = mt_rand(0, 30) . 'px ' . mt_rand(0, 30) . 'px ' . mt_rand(0, 30) . 'px ';
  }
  else {
    $shadow = '5px 5px 5px ';
  }
  if ($shadow_settings['rancolor'] === 'rancolor') {
    // Using decimal colors here for rgb
    $shadow .= 'rgba(' . mt_rand(0, 255) . ',' . mt_rand(0, 255) . ',' . mt_rand(0, 255) . ',';
  }
  else {
    $shadow .= 'rgba(0,0,0,';
  }
  if ($shadow_settings['ranopacity'] === 'ranopacity') {
    // Generating a number between 0-1 by tenths
    $shadow .= mt_rand(0, 10) / 10 . ')';
  }
  else {
    $shadow .= '1)';
  }

  // Output should look like this: '5px 5px 5px rgba(0,0,0,1)'
  return $shadow;
}

/**
 * Function to randomly select a font family.
 */
function _disco_generate_font_family() {
  // Default font families available
  // See https://developer.mozilla.org/en-US/docs/Web/CSS/font-family
  $families = array(
    'serif',
    'sans-serif',
    'monospace',
    'cursive',
    'fantasy',
  );
  // Choosing a random family from the list
  $family = $families[mt_rand(0, 4)];
  return $family;
}

/**
 * Function to randomly generate a size.
 */
function _disco_generate_font_size() {
  // Maxxing users out to 30 so the fonts are not too big
  // Font sizes smaller than 3 are two small to even be funny
  return mt_rand(3, 30) . 'px';
}

/**
 * Function to create style attributes.
 *
 * Statements below each add a CSS style to be applied inline to elements
 */
function _disco_generate_style() {
  $style = '';

  if (variable_get('disco_color_enabled') === 1) {
    $colors = variable_get('disco_color_settings');
    if ($colors['color'] === 'color') {
      $style .= 'color:#' . _disco_generate_color() . ';';
    }
    if ($colors['bgcolor'] === 'bgcolor') {
      $style .= 'background-color:#' . _disco_generate_color() . ';';
    }
  }

  if (variable_get('disco_shadow_enabled') === 1) {
    $location = variable_get('disco_shadow_location');
    if ($location['text'] === 'text') {
      $shadow = _disco_generate_shadow();
      $style .= 'text-shadow:' . $shadow . ';';
    }
    if ($location['objects'] === 'objects') {
      $shadow = _disco_generate_shadow();
      $style .= '-moz-box-shadow:' . $shadow . ';';
      $style .= '-webkit-box-shadow:' . $shadow . ';';
      $style .= 'box-shadow:' . $shadow . ';';
    }
  }

  if (variable_get('disco_font_enabled') === 1) {
    $font = variable_get('disco_font_settings');
    if ($font['ranfont'] === 'ranfont') {
      $style .= 'font-family:' . _disco_generate_font_family() . ';';
    }
    if ($font['ransize'] === 'ransize') {
      $style .= 'font-size:' . _disco_generate_font_size() . ';';
    }
  }

  return $style;
}

/**
 * Function to determine if we're wanting to restrict the
 * application to a specific user or role.
 */
function _disco_check_users_and_roles() {
  $user_en = variable_get('disco_user_enabled');
  $role_en = variable_get('disco_role_enabled');
  $users = variable_get('disco_users');
  $roles = variable_get('disco_roles');

  // Grab info about the current user
  global $user;

  // We're using user filtering
  if ($user_en === 1) {
    // Loop through to determine if our user matches
    // one of the users selected for application.
    foreach ($users as $disco_user) {
      if ($disco_user === $user->uid) {
        return TRUE;
      }
    }
  }

  // We're using role filtering
  if ($role_en === 1) {
    // Loop through to determine if our user has one
    // of the roles we're looking for.
    foreach ($roles as $role) {
      if (user_has_role($role)) {
        return TRUE;
      }
    }
  }

  // We don't want to filter on anything
  if ($user_en === 0 && $role_en === 0) {
    return TRUE;
  }

  // We want to filter but don't have any users
  // or roles selected to filter on.
  return FALSE;
}

/**
 * Implements template_process_html().
 *
 * Process variables for html.tpl.php
 *
 * Elements are not special snowflakes here. We will be applying CSS styles
 * to every single item on the page whether they're rendered or contain
 * any content. Items that are loaded after this hook is called are exempt
 * to this rule. This contains items like those rendered in page_top.
 *
 * @param vars
 *   Array that holds all the HTML information ready to render
 *
 * @see _disco_generate_style()
 * @see _disco_check_users_and_roles()
 */
function disco_process_html(&$vars) {
  if (_disco_check_users_and_roles()) {
    // Dont bother running this if nothing is going to be applied
    if (empty(_disco_generate_style())) {
      $html = new DOMDocument();
      // We're going to intercept the HTML before it's sent to the browser
      // This can be found in $vars['page']
      $html->loadHTML(
        // We've need explicitly use UTF-8 otherwise ISO-8859-1 is used
        mb_convert_encoding(
          // We need to add <html> tags around the page content because
          // when we pull it out, it's just a snippet and loadHTML will
          // attempt to put it's own tags on there.
          '<html>' . $vars['page'] . '</html>',
          'HTML-ENTITIES',
          'UTF-8'
        ),
        // We tell loadHTML that we don't need to add tags automatically
        LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD
      );
      $xpath = new DOMXPath($html);
      // Loop through the HTML and tag everything except for the <html> tags
      // we explicitly added above.
      foreach ($xpath->query("//*[not(self::html)]") as $node) {
        // Add a style attribute to every found node
        $node->setAttribute("style", _disco_generate_style());
      }
      // Strip the first 6 and last 8 characters off the HTML. This
      // cleans out the <html> tags we added above.
      $discoHtml = substr(substr($html->saveHtml(), 6), 0, -8);
      // Send the modified page back to Drupal
      $vars['page'] = $discoHtml;
    }
  }
}

/**
 * Implements hook_menu().
 *
 * Generates menu items and permissions for administration.
 */
function disco_permission() {
  return array(
    'disco admin' => array(
      'title' => t('Administer Disco settings'),
      'description' => t('Perform configuration for the Disco module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Generates menu items and permissions for administration.
 */
function disco_menu() {
  // Create the menu
  $items = array();

  $items['admin/config/user-interface/disco'] = array(
    'title' => 'Disco',
    'description' => 'Configuration for Disco',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('disco_settings_form'),
    'access arguments' => array('disco admin'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'disco.admin.inc',
  );

  return $items;
}
